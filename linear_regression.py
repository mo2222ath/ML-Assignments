# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fnQhBknG5iWL2b7G6AWgUx1w05QOaTXe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class LinearRegression2():

    def __init__(self, learning_rate, iterations ,X, y):
          self.learning_rate = learning_rate
          self.iterations = iterations
          self.X = X
          self.y = y
          self.alpha = learning_rate
          self.X.insert(0, 'Ones', 1)
          self.X = np.matrix(self.X.values)
          self.y = np.matrix(self.y.values)
          self.theta = np.matrix(np.array([0] * self.X.shape[1]))
          self.cost = np.zeros(self.iterations)

    
    def computeCost(self):
      inner = np.power(((self.X * self.theta.T) - self.y), 2)
      return np.sum(inner) / (2 * len(self.X))

    def gradientDescent(self):
        self.theta = np.matrix(np.zeros(self.theta.shape))
        parameters = int(self.theta.ravel().shape[1])
        
        
        for i in range(self.iterations):
            error = (self.X * self.theta.T) - self.y
            
            for j in range(parameters):
                term = np.multiply(error, self.X[:,j])
                self.theta[0,j] = self.theta[0,j] - ((self.alpha / len(self.X)) * np.sum(term))
            self.cost[i] = self.computeCost()
            
    def newPredict(self,X):
      return X * self.theta.T

data = pd.read_csv('house_data.csv')

data = data[['grade', 'bathrooms', 'lat', 'sqft_living', 'view' , 'price']]

data = (data - data.mean()) / data.std()

flag = False
if flag:
    X = data[['sqft_living']]
else:
    X = data.loc[:,['grade', 'bathrooms', 'lat', 'sqft_living', 'view']]
y = data[['price']]

alpha = 0.1
iters = 100

linearModel = LinearRegression2(alpha , iters , X , y)
linearModel.gradientDescent()

print('costs = ' , linearModel.cost)
print('last Cost of the model = ' , linearModel.cost[-1])
print('**************************************')


# draw error graph

fig, ax = plt.subplots(figsize=(5,5))
ax.plot(np.arange(iters), linearModel.cost, 'r')
ax.set_xlabel('Iterations')
ax.set_ylabel('Cost')
ax.set_title('Error vs. Training Epoch')

